#!/usr/bin/env node

const { Source, Origin, Sink } = require('../')
const prettyBytes = require('pretty-bytes')
const prettyHash = require('pretty-hash')
const download = require('hypercore-block-request')
const Progress = require('progress')
const minimist = require('minimist')
const rimraf = require('rimraf')
const debug = require('debug')('little-network-box')
const path = require('path')
const pump = require('pump')
const ram = require('random-access-memory')
const raf = require('random-access-file')
const pkg = require('../package.json')
const fs = require('fs')

process.title = 'little-network-box'

const { DEBUG = '' } = process.env
const argv = minimist(process.argv.slice(2), {
  boolean: [
    'help',
    'debug',
    'version',
  ],

  string: [
    'encryption-key',
    'secret-key',
    'source',
    'origin',
    'nonce',
    'sink',
    'key',
  ],

  alias: {
    help: 'h',
    debug: 'D',
    version: 'V',
  },

  default: {
    help: false,
    debug: false,
    version: false,
  }
})

const usage = `usage: ${path.basename(process.argv[1])} [-hDV] [options]
where options can be:

  --origin <origin>       Share an origin
  --source <source>       Share a source
  --sink <destination>    Download into sink
  -h, --help              Show this message
  -D, --debug             Enable debug output (DEBUG="${pkg.name}")
  -V, --version           Show program version
`

process.on('uncaughtException', onerror)

void main().catch(onfatal)
async function main() {
  if (argv.help) {
    console.log(usage)
    return process.nextTick(process.exit)
  }

  if (argv.version) {
    console.log(pkg.version)
    return process.nextTick(process.exit)
  }

  if (!Array.isArray(argv.source)) {
    argv.source = [ argv.source ].filter(Boolean)
  }

  if (argv.source.length) {
    for (const src of argv.source) {
      const source = new Source(ram, argv.key && argv['secret-key'] ? argv.key : null, {
        encryptionKey: argv['encryption-key'],
        secretKey: argv['secret-key'],
        nonce: argv.nonce,
        uri: path.resolve(src)
      })

      source.ready(() => {
        console.log(' info: source %s online', prettyHash(source.key))
        console.log(' info: source %s file= %s',
          prettyHash(source.key), source.uri)
        console.log(' info: source %s key= %s',
          prettyHash(source.key), source.key.toString('hex'))
      })

      source.audit((err, report) => {
        console.log(' info: source %s audit=', prettyHash(source.key), report)
        console.log(' info: source %s byteLength=',
          prettyHash(source.key), prettyBytes(source.byteLength))
      })

      source.on('connection', (socket, info) => {
        if (info.peer) {
          console.log(' info: source %s connection %s:%s', prettyHash(source.key), info.peer.host, info.peer.port)
        } else {
          console.log(' info: source %s connection', prettyHash(source.key))
        }
      })

      source.on('error', onerror)
    }
  }

  if (argv.sink) {
    const sink = new Sink(path.resolve(argv.sink), argv.key, {
      encryptionKey: argv['encryption-key'],
      storage: raf,
      sparse: true,
      nonce: argv.nonce,
    })

    sink.on('error', onerror)

    sink.ready(() => {
      console.log(' info: sink %s online', prettyHash(sink.key))
      console.log(' info: sink %s online file= %s', prettyHash(sink.key),
        path.resolve(argv.sink))
      console.log(' info: sink %s key= %s',
        prettyHash(sink.key), sink.key.toString('hex'))

    })

    let downloaded = 0
    let progress = null

    const now = Date.now()
    const stats = {
      downloaded: 0,
      average: 0,
      blocks: 0,
    }

    function onclose() {
      const files = [ 'bitfield', 'signatures', 'tree' ]
      let pending = 0
      for (const file of files) {
        const filename = path.resolve(`${argv.sink}.${file}`)
        pending++
        rimraf(filename, () => {
          if (0 === --pending) {
            process.nextTick(process.exit)
          }
        })
      }
    }

    download(sink, { concurrency: Infinity, stride: 1024 }, (err) => {
      onerror(err)

      if (progress) {
        progress.update(.99, stats)
        progress.update(1, stats)
      }

      sink.close(onclose)

      console.log(' info: sink %s download complete in %s seconds',
        prettyHash(sink.key),
        ((Date.now() - now) / 1000).toFixed(2))
    })

    sink.on('sync', () => {
      if (sink.downloaded() === sink.length) {
        if (progress) {
          progress.update(1, stats)
        }

        console.log(' info: sink %s did finish syncing %s blocks in %s seconds',
          prettyHash(sink.key), sink.length, ((Date.now() - now) / 1000).toFixed(2))
        sink.close(onclose)
      }
    })

    sink.once('connection', () => {
      console.log(' info: sink %s connection', prettyHash(sink.key))
    })

    sink.on('connection', () => {
      sink.update(1, () => {
        if (!progress) {
          console.log(' info: starting download... [%d blocks remaining]', sink.length - sink.downloaded())
          progress = new Progress(
            ' info: downloading [:bar] (:current/:total) :percent ' +
            '| :etas remaining ' +
            '| :rate/bps (blocks per second) ' +
            '| :average avg block size', {
              complete: '#',
              incomplete: '-',
              width: 20,
              total: sink.length
            })
        }

        progress.update(sink.downloaded() / sink.length, stats)

        downloaded = sink.downloaded()
      })
    })

    sink.on('download', (index, data) => {
      stats.downloaded += data.length
      stats.blocks++
      stats.average = prettyBytes((stats.downloaded / stats.blocks) || 0)

      if (progress) {
        progress.total = sink.length
        if (!progress.complete) {
          progress.tick(sink.downloaded() - downloaded, stats)
          downloaded = sink.downloaded()
        }
      }
    })
  }

  if (argv.origin) {
    const origin = new Origin(ram, argv.key, {
      encryptionKey: argv['encryption-key'],
      secretKey: argv['secret-key'],
      nonce: argv.nonce,
    })

    origin.ready(() => {
      pump(fs.createReadStream(argv.origin, { highWaterMark: 1024 }), origin.createWriteStream(), (err) => {
        if (err) { onfatal(err) }

        origin.audit((err, report) => {
          console.log(' info: origin %s audit=', prettyHash(origin.key), report)
        })
      })

      console.log(' info: origin %s online', prettyHash(origin.key))
      console.log(' info: origin %s file= %s', prettyHash(origin.key), argv.origin)
      console.log(' info: origin %s key= %s',
        prettyHash(origin.key), origin.key.toString('hex'))
    })

    origin.on('connection', () => {
      console.log(' info: origin %s connection', prettyHash(origin.key))
    })

    origin.on('error', onerror)
  }

  if (!argv.origin && !argv.source && !argv.sink) {
    console.error(usage)
    return process.nextTick(process.exit, 1)
  }
}

function onerror(err, fatal) {
  if (err) {
    debug(err.stack || err)
    console.error(fatal ? 'fatal:' : 'error:', err.message)
  }
}

function onfatal(err) {
  if (err) {
    onerror(err, true)
    process.nextTick(process.exit, 1)
  }
}
